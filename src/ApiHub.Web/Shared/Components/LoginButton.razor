@using System.Web
@inject NavigationManager NavigationManager
@inject ContextMenuService ContextMenuService
@inject HttpClient HttpClient

@if (_authenticated)
{
    <RadzenButton
        class="mx-4"
        Text="@_username" 
        Icon="account_circle" 
        Variant="Variant.Filled"
        ContextMenu="ShowContextMenuWithItems"
        ButtonStyle="ButtonStyle.Info" 
        Size="ButtonSize.Small" />
}
else
{
    <RadzenButton
        class="mx-4"
        Click="@OnLogin"
        Icon="account_circle" 
        Text="Login" 
        Variant="Variant.Outlined" 
        ButtonStyle="ButtonStyle.Secondary" 
        Size="ButtonSize.Small" />
}

@code {
    private bool _authenticated = false;
    private string _username = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authed = await HttpClient.GetAsync("auth/username");
        _authenticated = authed.IsSuccessStatusCode;
        
        if (_authenticated)
        {
            _username = await authed.Content.ReadAsStringAsync();
        }
    }
    
    private void ShowContextMenuWithItems(MouseEventArgs args)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new(){ Text = "Logout", Value = 1 },
            }, OnMenuItemClick);
    }

    private void OnMenuItemClick(MenuItemEventArgs args)
    {
        if ((int)args.Value == 1)
        {
            OnLogout();
        }
    }

    private void OnLogin()
    {
        var current = NavigationManager.Uri;
        var encoded = HttpUtility.UrlEncode(current);
        NavigationManager.NavigateTo(
            $"/api/v1/auth/login?redirect={encoded}", true);
    }

    private void OnLogout()
    {
        var current = NavigationManager.Uri;
        var encoded = HttpUtility.UrlEncode(current);
        NavigationManager.NavigateTo(
            $"/api/v1/auth/logout?redirect={encoded}", true);
    }
}
